package com.dintal.react.domain;

import static com.dintal.react.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AIEAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAIEAllPropertiesEquals(AIE expected, AIE actual) {
        assertAIEAutoGeneratedPropertiesEquals(expected, actual);
        assertAIEAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAIEAllUpdatablePropertiesEquals(AIE expected, AIE actual) {
        assertAIEUpdatableFieldsEquals(expected, actual);
        assertAIEUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAIEAutoGeneratedPropertiesEquals(AIE expected, AIE actual) {
        assertThat(expected)
            .as("Verify AIE auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAIEUpdatableFieldsEquals(AIE expected, AIE actual) {
        assertThat(expected)
            .as("Verify AIE relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e ->
                assertThat(e.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getIcon()).as("check icon").isEqualTo(actual.getIcon()))
            .satisfies(e -> assertThat(e.getVersion()).as("check version").isEqualTo(actual.getVersion()))
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()))
            .satisfies(e -> assertThat(e.getRate()).as("check rate").isEqualTo(actual.getRate()))
            .satisfies(e -> assertThat(e.getAieMetadata()).as("check aieMetadata").isEqualTo(actual.getAieMetadata()))
            .satisfies(e -> assertThat(e.getUserID()).as("check userID").isEqualTo(actual.getUserID()))
            .satisfies(e -> assertThat(e.getIsPublic()).as("check isPublic").isEqualTo(actual.getIsPublic()))
            .satisfies(e -> assertThat(e.getOrganizationName()).as("check organizationName").isEqualTo(actual.getOrganizationName()))
            .satisfies(e -> assertThat(e.getTenantID()).as("check tenantID").isEqualTo(actual.getTenantID()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAIEUpdatableRelationshipsEquals(AIE expected, AIE actual) {
        // empty method
    }
}
